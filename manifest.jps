type: install
name: DKAN Cluster
id: dkan-cluster
categories:
  - apps/clusters
  - apps/content-management
description: 
  text: DKAN is a community-driven, free and open source open data platform that gives organizations and individuals ultimate freedom to publish and consume structured information.
  short: DKAN is a community-driven, free and open source open data platform
logo: images/dkan-70.png

baseUrl: https://raw.githubusercontent.com/jelastic-jps/dkan-cluster/v2.0.0

onBeforeInstall: /scripts/beforeinstall.js?_r=${fn.random}

skipNodeEmails: true
nodes: definedInOnBeforeInstall

globals:
  DB_USER: jelastic-${fn.random}
  DB_PASS: ${fn.password(10)}
  DKAN_ADMIN_PASS: ${fn.password(10)}
  PROTOCOL: http
  SUCCESS: success
  EMAIL: default
 
onAfterScaleOut[nodeGroup:cp]:
  forEach(event.response.nodes):
    - log: App Servers Setup
    - setNodeDisplayName [${@i.id}]: AppServer
    - setupCP:
        nodeId: ${@i.id}
    - root-access:
        nodeId: ${@i.id}
        
onAfterRedeployContainer[cp]:
  - setupCP:
      nodeId: cp
  - root-access:
      nodeId: cp
      
onAfterClone:
  - install: ${baseUrl}/scripts/resetReplication.jps?_r=${fn.random}
    envName: ${event.response.env.envName}
    settings:
      db_user: ${globals.DB_USER}
      db_pass: ${globals.DB_PASS}
 
  - script: |
        var resp = {result:0}
        if (${event.response.env.sslstate}) {
          resp.onAfterReturn = {setGlobals: {PROTOCOL: "https"}}
        }
        return resp;
 
  - install: ${baseUrl}/scripts/setupDomain.jps?_r=${fn.random}
    envName: ${event.response.env.envName}
    settings:
      domain: ${globals.PROTOCOL}://${event.response.env.domain}

onAfterMigrate:
  - install: ${baseUrl}/scripts/resetReplication.jps?_r=${fn.random}
    settings:
      db_user: ${globals.DB_USER}
      db_pass: ${globals.DB_PASS}
 
  - script: |
        var resp = {result:0}
        if (${env.sslstate}) {
          resp.onAfterReturn = {setGlobals: {PROTOCOL: "https"}}
        }
        return resp;
 
  - install: ${baseUrl}/scripts/setupDomain.jps?_r=${fn.random}
    settings:
      domain: ${globals.PROTOCOL}://${env.domain}
  
onInstall:

  - log: Auto Scaling Triggers
  - script: /scripts/addTriggers.js
    nodeGroup: cp
    resourceType: CPU
    loadGrowth: slow
    cleanOldTriggers: true
    scaleDownLimit: ${nodes.cp.length}
    
  - log: Set Node Display Name
  - setNodeDisplayName [bl]: Load balancer
  - setNodeDisplayName [cp]: AppServer
  - setNodeDisplayName [storage]: GlusterFS

  - mountGlusterFS  
  
  - log: Master-Master Replication Setup
  - install: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/scripts/ms-mm-configuration.jps
    settings:        
      path: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/
      scheme: master
      db_user: "${globals.DB_USER}"
      db_pass: "${globals.DB_PASS}"
      custom_conf: "${baseUrl}/configs/sqldb/dkan.cnf"
    nodeGroup: sqldb
      
  - setupCP:
      nodeId: cp

  - root-access:
      nodeId: cp
      
  - get-dkan      

  - install-dkan
  
  - install: ${baseUrl}/scripts/setupDomain.jps?_r=${fn.random}
    settings:
       domain: ${env.url}
    
actions:

  get-dkan:
    - cmd[${nodes.storage.master.id}]: |-
        wget ${baseUrl}/modules/dkan.tar.gz -O /tmp/dkan.tar.gz &>> /var/log/run.log
        tar -C /data -xzf /tmp/dkan.tar.gz &>> /var/log/run.log
        chmod 777 -R /data/*
        chown 700 -R /data/*

  install-dkan:
    - cmd[${nodes.cp.master.id}]: |-
        [ ! -d $HOME/bin ] && mkdir $HOME/bin
        wget ${baseUrl}/scripts/setupDKAN.sh?_r=${fn.random} -O ~/bin/setupDKAN.sh &>> /var/log/run.log
         bash ~/bin/setupDKAN.sh --init true --DB_HOST sqldb --DB_USER ${globals.DB_USER} --DB_PASS ${globals.DB_PASS}  --DKAN_ADMIN_PASS ${globals.DKAN_ADMIN_PASS};

  setupCP:
    - log: CP OPTIMIZATION
    - install: https://raw.githubusercontent.com/jelastic/templates/master/config.jps?_r=${fn.random}
      settings:
        targetGroup: cp
        targetNodes: ${this.nodeId}
        optimization: drupal7

  mountGlusterFS:
    - log: Mount GlusterFS
    - api:
      - method: jelastic.environment.file.AddMountPointByGroup
        params:
          nodeGroup: cp
          sourceNodeId: ${nodes.storage.master.id}
          sourcePath: /data
          path: /var/www/webroot/ROOT
          sourceAddressType: NODE_GROUP
          
  root-access:
    cmd [${this.nodeId}]: |-
      USER=$(grep -i ''x:''$(cat /etc/passwd | grep jelastic:x | cut -d'':'' -f 3) /etc/passwd | grep -v jelastic:x | cut -d: -f1);
      touch /etc/sudoers.d/sudo;
      echo "$USER ALL=NOPASSWD: ALL" >> /etc/sudoers.d/sudo
      echo "jelastic ALL=NOPASSWD: ALL" >> /etc/sudoers.d/sudo
    user: root    

success:
  email: success/email/cluster/oneregion-${globals.EMAIL}.md?_r=${fn.random}
  text: success/text/oneregion/${globals.SUCCESS}.md?_r=${fn.random}

startPage: ${env.url}
